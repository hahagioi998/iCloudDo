<?xml version="1.0" encoding="UTF-8"?>
<!--
    status 表示log4j2本身打印日志的级别
    monitorInterval：自动检测修改配置文件和重新配置本身的时间，单位秒
-->
<Configuration status="INFO" monitorInterval="60">
    <!--变量配置-->
    <Properties>
        <!--
            格式化输出：
            %d表示日期；
            %X打印自定义的数据，通过 org.sl4j.MDC 设置，ex: MDC.put("user", "aaa");
            %thread表示线程名；
            %-5level：级别从左显示5个字符宽度；
            %logger{50} 表示logger名字最长50个字符，否则按照句点分割
            %msg：日志消息；
            %n是换行符
        -->
        <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{user}]-[%X{args}] [%thread] %-5level %logger{50} - %msg%n" />
        <!-- 定义日志存储的路径-->
        <property name="LOG_HOME" value="./logs/" />
    </Properties>

    <Appenders>
        <!-- 控制台打印 -->
        <Console name="STDOUT" target="SYSTEM_OUT">
            <PatternLayout pattern="${LOG_PATTERN}"/>
        </Console>

        <!--文件会打印出所有信息，append为true,则在日志文件中追加日志，为false则每次项目启动清空文件重新生成，实际作用不大-->
        <File name="FileLog" fileName="${LOG_HOME}/file.log" append="true">
            <!-- 只输出info及以上级别的信息(info、warn、error)（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}" />
        </File>

        <!--
            常规info，
            fileName为最新的日志文件，
            每当大小超过size，则会以 filePattern 的格式重新生成一个归档文件
            这里设置每天会生成一个归档文件
        -->
        <RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/info.log" filePattern="${LOG_HOME}/info-%d{yyyy-MM-dd}-%i.log">
            <!-- 只打印info级别日志 注意先后顺序，优先排除不需要的级别-->
            <Filters>
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <!--
                    interval属性用来指定多久滚动一次，默认是1，为filePattern最后一个单位
                    如果 filePattern 为 yyyy-MM-dd，则按天生成归档日志
                    如果 filePattern 为 yyyy-MM-dd HH-mm，则按分钟生成归档日志
                -->
                <TimeBasedTriggeringPolicy interval="1"/>
                <!-- 指定单个日志文件的大小 -->
                <SizeBasedTriggeringPolicy size="5M"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy fileIndex="max" max="7"/>
        </RollingFile>

        <!-- 常规error -->
        <RollingFile name="RollingFileError" fileName="${LOG_HOME}/error.log" filePattern="${LOG_HOME}/error-%d{yyyy-MM-dd}-%i.log">
            <!-- 只打印error级别日志 -->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="5M"/>
            </Policies>
            <DefaultRolloverStrategy fileIndex="max" max="7"/>
        </RollingFile>

        <!-- service包下的日志 -->
        <RollingFile name="RollingFileMyService" fileName="${LOG_HOME}/service.log" filePattern="${LOG_HOME}/service-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="5M"/>
            </Policies>
            <DefaultRolloverStrategy fileIndex="max" max="7"/>
        </RollingFile>

        <!-- 指定logger为 schedule 的日志 -->
        <RollingFile name="RollingFileSchedule" fileName="${LOG_HOME}/schedule.log" filePattern="${LOG_HOME}/schedule-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="5M"/>
            </Policies>
            <DefaultRolloverStrategy fileIndex="max" max="7"/>
        </RollingFile>

        <!-- 指定logger为 asyncLog 的为异步打印日志 -->
        <RollingFile name="RollingFileAsync" fileName="${LOG_HOME}/async.log" filePattern="${LOG_HOME}/async-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="5M"/>
            </Policies>
            <DefaultRolloverStrategy fileIndex="max" max="7"/>
        </RollingFile>
    </Appenders>

    <Loggers>
        <!--设置指定包或类的日志级别，ex: 过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO"></logger>
        <logger name="org.mybatis" level="INFO"></logger>

        <!-- 指定具体的包或者类生成单独的文件 additivity 为false 日志不会向上传递，为true，在对应的root日志里面也会打印-->
        <Logger name="org.ylc.note.log4j2.service" level="info" additivity="false">
            <AppenderRef ref="RollingFileMyService" />
        </Logger>

        <!-- 指定logger为 schedule 的日志生成单独的文件 这里的name 和 LoggerFactory.getLogger("schedule") 中的属性一样-->
        <Logger name="schedule" level="info" additivity="false">
            <AppenderRef ref="RollingFileSchedule" />
        </Logger>

        <!-- AsyncRoot - 异步记录日志 - 需要LMAXDisruptor的支持 -->
        <AsyncLogger name="asyncLog" level="info" additivity="false">
            <AppenderRef ref="RollingFileAsync"/>
        </AsyncLogger>

        <!-- 指定项目的根日志 -->
        <Root level="info">
            <AppenderRef ref="STDOUT"/>
            <AppenderRef ref="FileLog"/>
            <AppenderRef ref="RollingFileInfo"/>
            <AppenderRef ref="RollingFileError"/>
        </Root>
    </Loggers>

</Configuration>