invokeBeanFactoryPostProcessors源码分析

    @Override
	public void refresh() throws BeansException, IllegalStateException {
		synchronized (this.startupShutdownMonitor) {
			StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");

			// Prepare this context for refreshing.  1:准备刷新上下文环境
			prepareRefresh();

			// Tell the subclass to refresh the internal bean factory. 2:获取告诉子类初始化Bean工厂
			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

			// Prepare the bean factory for use in this context. 3:对bean工厂进行填充属性
			prepareBeanFactory(beanFactory);

			try {
				// Allows post-processing of the bean factory in context subclasses. 第四:留给子类去实现该接口
				postProcessBeanFactory(beanFactory);

				StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");
				// Invoke factory processors registered as beans in the context. 调用bean工厂的后置处理器.
				invokeBeanFactoryPostProcessors(beanFactory);

				// Register bean processors that intercept bean creation.  调用bean的后置处理器
				registerBeanPostProcessors(beanFactory);
				beanPostProcess.end();

				// Initialize message source for this context.  初始化国际化资源处理器.
				initMessageSource();

				// Initialize event multicaster for this context. 创建事件多播器
				initApplicationEventMulticaster();

				// Initialize other special beans in specific context subclasses.  这个方法同样也是留给子类实现的    springboot也是从这个方法进行启动tomat的.
				onRefresh();

				// Check for listener beans and register them.  把我们的事件监听器注册到多播器上
				registerListeners();

				// Instantiate all remaining (non-lazy-init) singletons.  实例化我们剩余的单实例bean.
				finishBeanFactoryInitialization(beanFactory);

				// Last step: publish corresponding event.  最后容器刷新 发布刷新事件(Spring cloud也是从这里启动的)
				finishRefresh();
			}

			catch (BeansException ex) {
				if (logger.isWarnEnabled()) {
					logger.warn("Exception encountered during context initialization - " +
							"cancelling refresh attempt: " + ex);
				}

				// Destroy already created singletons to avoid dangling resources.
				destroyBeans();

				// Reset 'active' flag.
				cancelRefresh(ex);

				// Propagate exception to caller.
				throw ex;
			}

			finally {
				// Reset common introspection caches in Spring's core, since we
				// might not ever need metadata for singleton beans anymore...
				resetCommonCaches();
				contextRefresh.end();
			}
		}
	}
