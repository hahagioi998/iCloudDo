1. spring bean的注入方式有哪些，循环依赖问题如何解决的？
   构造函数注入，属性注入

   构造函数注入无法解决循环依赖问题（双方都通过构造函数注入对方）

   属性注入可以解决循环依赖问题：使用了三级缓存

   以单例为例 DefaultSingletonBeanRegistry ，看一下其中的源码：

public class DefaultSingletonBeanRegistry extends SimpleAliasRegistry implements SingletonBeanRegistry {

	/** 一级缓存：用于存放完全初始化好的 bean **/
	private final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);

	/** 二级缓存：存放原始的 bean 对象（已经初始化但是尚未填充属性），用于解决循环依赖 */
	private final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<>(16);

	/** 三级级缓存：存放 bean 工厂对象，用于解决循环依赖 */
	private final Map<String, Object> earlySingletonObjects = new ConcurrentHashMap<>(16);

        @Nullable
	protected Object getSingleton(String beanName, boolean allowEarlyReference) {
		// 先从一级缓存查找，如果没有，判断当前对象是否正在初始化，如果该bean正在创建中，说明发生了循环依赖
		Object singletonObject = this.singletonObjects.get(beanName);
		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {
                        // 从二级缓存中查找，如果找到就返回，否则从三级缓存中查找
			singletonObject = this.earlySingletonObjects.get(beanName);
			if (singletonObject == null && allowEarlyReference) {
				synchronized (this.singletonObjects) {
					//
					singletonObject = this.singletonObjects.get(beanName);
					if (singletonObject == null) {
						singletonObject = this.earlySingletonObjects.get(beanName);
						if (singletonObject == null) {
							ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);
							if (singletonFactory != null) {
								singletonObject = singletonFactory.getObject();
								this.earlySingletonObjects.put(beanName, singletonObject);
								this.singletonFactories.remove(beanName);
							}
						}
					}
				}
			}
		}
		return singletonObject;
	}
}


// doCreateBean
protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)
 throws BeanCreationException {

 // 实例化当前尝试获取的bean对象，比如A对象和B对象都是在这里实例化的
 BeanWrapper instanceWrapper = null;
 if (mbd.isSingleton()) {
  instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);
 }
 if (instanceWrapper == null) {
  instanceWrapper = createBeanInstance(beanName, mbd, args);
 }

 // 判断Spring是否配置了支持提前暴露目标bean，也就是是否支持提前暴露半成品的bean
 boolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences
  && isSingletonCurrentlyInCreation(beanName));
 if (earlySingletonExposure) {
  // 如果支持，这里就会将当前生成的半成品的bean放到singletonFactories中，这个singletonFactories
  // 就是前面第一个getSingleton()方法中所使用到的singletonFactories属性，也就是说，这里就是
  // 封装半成品的bean的地方。而这里的getEarlyBeanReference()本质上是直接将放入的第三个参数，也就是
  // 目标bean直接返回
  addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));
 }

 try {
  // 在初始化实例之后，这里就是判断当前bean是否依赖了其他的bean，如果依赖了，
  // 就会递归的调用getBean()方法尝试获取目标bean
  populateBean(beanName, mbd, instanceWrapper);
 } catch (Throwable ex) {
  // 省略...
 }

 return exposedObject;
}


过滤器(filter)、拦截器(interceptor)、和AOP的区别
过滤器(filter)拦截web请求的url地址，只是适用于web中，依赖于Servlet容器，利用Java的回调机制进行实现。可以拦截到请求和响应的过程，做一些额外的处理，主要做过滤，认证等

拦截器(interceptor) 拦截 url请求，主要有三个方法preHandle，postHandle，afterCompletion，主要做国际化，主题更换，过滤等

AOP 面向切面，更加细粒度的控制，如拦截包、类、方法等，如事务，日志等。