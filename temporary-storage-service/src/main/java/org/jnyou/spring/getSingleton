// getSingleton
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
 // 尝试从缓存中获取成品的目标对象，如果存在，则直接返回
 Object singletonObject = this.singletonObjects.get(beanName);
 // 如果缓存中不存在目标对象，则判断当前对象是否已经处于创建过程中，在前面的讲解中，第一次尝试获取A对象
 // 的实例之后，就会将A对象标记为正在创建中，因而最后再尝试获取A对象的时候，这里的if判断就会为true
 if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {
  synchronized (this.singletonObjects) {
   singletonObject = this.earlySingletonObjects.get(beanName);
   if (singletonObject == null && allowEarlyReference) {
    // 这里的singletonFactories是一个Map，其key是bean的名称，而值是一个ObjectFactory类型的
    // 对象，这里对于A和B而言，调用图其getObject()方法返回的就是A和B对象的实例，无论是否是半成品
    ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);
    if (singletonFactory != null) {
     // 获取目标对象的实例
     singletonObject = singletonFactory.getObject();
     this.earlySingletonObjects.put(beanName, singletonObject);
     this.singletonFactories.remove(beanName);
    }
   }
  }
 }
 return singletonObject;
}


// doCreateBean
protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)
 throws BeanCreationException {

 // 实例化当前尝试获取的bean对象，比如A对象和B对象都是在这里实例化的
 BeanWrapper instanceWrapper = null;
 if (mbd.isSingleton()) {
  instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);
 }
 if (instanceWrapper == null) {
  instanceWrapper = createBeanInstance(beanName, mbd, args);
 }

 // 判断Spring是否配置了支持提前暴露目标bean，也就是是否支持提前暴露半成品的bean
 boolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences
  && isSingletonCurrentlyInCreation(beanName));
 if (earlySingletonExposure) {
  // 如果支持，这里就会将当前生成的半成品的bean放到singletonFactories中，这个singletonFactories
  // 就是前面第一个getSingleton()方法中所使用到的singletonFactories属性，也就是说，这里就是
  // 封装半成品的bean的地方。而这里的getEarlyBeanReference()本质上是直接将放入的第三个参数，也就是
  // 目标bean直接返回
  addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));
 }

 try {
  // 在初始化实例之后，这里就是判断当前bean是否依赖了其他的bean，如果依赖了，
  // 就会递归的调用getBean()方法尝试获取目标bean
  populateBean(beanName, mbd, instanceWrapper);
 } catch (Throwable ex) {
  // 省略...
 }

 return exposedObject;
}